//Edited sp_ram_wrap for replacing 8192*32 RAM with 16 2048*8 RAMs 
//Latest edit: 2025.3.23 Created the first version.
//Latest edit: 2025.3.26 Changed the structural logic to 4 groups with 4 rams in each group

module sp_ram_wrap
#(
  parameter RAM_SIZE   = 32768,              // 总容量 (32 KB)
  parameter ADDR_WIDTH = 15,                 // 地址宽度
  parameter DATA_WIDTH = 32                  // 数据宽度 (4 字节)
)(
  input  logic                    clk,
  input  logic                    rstn_i,
  input  logic                    en_i,
  input  logic [ADDR_WIDTH-1:0]    addr_i,    // 15-bit 地址
  input  logic [DATA_WIDTH-1:0]    wdata_i,   // 32-bit 输入数据
  output logic [DATA_WIDTH-1:0]    rdata_o,   // 32-bit 输出数据
  input  logic                     we_i,      // 写使能
  input  logic [DATA_WIDTH/8-1:0]  be_i       // 4-bit 字节写使能
);

  // RAM 片参数
  localparam RAM_DEPTH = 2048;
  localparam RAM_COUNT = 16;   // 16 个 RAM，每个 2048x8bit

  logic [10:0] addr_ram;       // 11-bit RAM 内部地址
  logic [3:0] group_sel;       // 选择 4 片 RAM 的组

  assign addr_ram = addr_i[14:4]; // 11-bit 地址 (2048 行)
  assign group_sel = addr_i[3:2];   // 选择4个 RAM 片的组

  // 16 片 2048x8bit RAM 的数据端口
  logic [7:0] ram_dout[RAM_COUNT-1:0];

  // 16 片 RAM 片实例化
  genvar i;
  generate
    for (i = 0; i < RAM_COUNT; i = i + 1) begin : ram_block
      sp_ram_2048x8 ram_inst (
        .clk    ( clk      ),
        .addr_i ( addr_ram ),
        .we_i   ( we_i & (group_sel == (i/4)) & be_i[i%4] ), // 选择特定 RAM 并匹配 `be`
        .wdata_i( wdata_i[(i%4)*8 +: 8] ), // 选择特定字节
        .rdata_o( ram_dout[i] )
      );
    end
  endgenerate

  // 读取数据组合（从 4 个 RAM 片拼装 32-bit 数据）
  always_comb begin
    case (group_sel)
      2'b00: rdata_o = {ram_dout[3], ram_dout[2], ram_dout[1], ram_dout[0]};
      2'b01: rdata_o = {ram_dout[7], ram_dout[6], ram_dout[5], ram_dout[4]};
      2'b10: rdata_o = {ram_dout[11], ram_dout[10], ram_dout[9], ram_dout[8]};
      2'b11: rdata_o = {ram_dout[15], ram_dout[14], ram_dout[13], ram_dout[12]};
    endcase
  end

endmodule


endmodule
